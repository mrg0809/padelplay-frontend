import{s as a}from"./supabase.e1c7230d.js";const c=async(o,e=null)=>{try{if(o.trim()){const{data:r,error:l}=await a.from("clubs").select("id, name, address, logo_url").ilike("name",`%${o}%`);if(l)throw l;return r.map(t=>({id:t.id,name:t.name,address:t.address,logo_url:t.logo_url}))}else if(e){const{latitude:r,longitude:l}=e,{data:t,error:n}=await a.rpc("calculate_distance",{lat:r,lng:l});if(n)throw n;return t.map(s=>({id:s.club_id,name:s.name,address:s.address,logo_url:s.logo_url,distance:s.distance}))}else return[]}catch(r){throw console.error("Error fetching clubs:",r.message),r}};async function d(o){try{const{data:e,error:r}=await a.from("clubs").select("id, name, location, address, city, state, country, contact_phone, contact_email, logo_url, postal_code, latitude, longitude, geolocation, facebook_url, instagram_url, tiktok_url, whatsapp_number, profiles(id)").eq("id",o).single();if(r)throw console.error("Error fetching club details:",r),r;return e&&Object.keys(e).length>0?e:(console.log("No club details found for ID:",o),null)}catch(e){throw console.error("Error fetching club details:",e),e}}const u=async o=>{const{data:e,error:r}=await a.from("schedules").select("opening_time, closing_time").eq("club_id",o);if(r)throw new Error(r.message);return e};async function f(o=10){console.log(`Workspaceing first ${o} clubs...`);const{data:e,error:r}=await a.from("clubs").select(`
      id,
      name,
      address,
      logo_url
      // Add other fields needed for the list display
    `).order("name",{ascending:!0}).limit(o);if(r)throw console.error("Error fetching first clubs:",r),new Error(`Supabase error: ${r.message}`);return console.log("First clubs data:",e),e||[]}export{f as a,u as f,d as g,c as s};
