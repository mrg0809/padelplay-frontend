import{s as r}from"./supabase.aa6636fe.js";const U=async(s,n=null,c=null,p=null)=>{console.log("DEBUG: getClubPaymentOrdersWithFilters called with:",{club_id:s,startDate:n,endDate:c,eventType:p});const _=r.from("payment_orders").select("*").limit(10),{data:y,error:f}=await _;console.log("DEBUG: Sample payment_orders data:",{debugData:y,debugError:f});const g=r.from("payment_orders").select("*").eq("recipient_id",s).limit(5),{data:m,error:E}=await g;console.log("DEBUG: Payment orders with recipient_id matching club_id:",{recipientDebugData:m,recipientDebugError:E});try{let a=r.from("payment_orders").select(`
        id, order_date, total_amount, payment_method, payment_status, 
        transaction_id, event_type, event_id, club_commission, player_commission, 
        is_full_payment, recipient_id, user_id
      `).eq("event_type","reservation");n&&c?a=a.gte("order_date",n).lte("order_date",c):n&&(a=a.gte("order_date",n));const{data:o,error:v}=await a.order("order_date",{ascending:!1});if(v)return console.log("ERROR in reservation payments query:",v),[];if(console.log("DEBUG: All reservation payments before filtering:",o),!o||o.length===0)return console.log("DEBUG: No reservation payments found"),[];const u=o.map(e=>e.event_id).filter(Boolean);if(u.length===0)return console.log("DEBUG: No event_ids found in reservation payments"),[];console.log("DEBUG: Looking for reservations with IDs:",u);const{data:l,error:w}=await r.from("reservations").select(`
        id, court_id, reservation_date, start_time, end_time,
        courts(id, name, club_id)
      `).in("id",u);if(w)return console.log("ERROR fetching reservations:",w),[];console.log("DEBUG: Found reservations:",l);const h=l?l.filter(e=>e.courts&&e.courts.club_id===s):[],R=new Set(h.map(e=>e.id));console.log("DEBUG: Club reservations:",h),console.log("DEBUG: Club reservation IDs:",Array.from(R));const d=o.filter(e=>R.has(e.event_id));if(console.log("DEBUG: Filtered club payments:",d),d.length>0){const e=[...new Set(d.map(t=>t.user_id).filter(Boolean))];if(e.length>0){const{data:t,error:B}=await r.from("players").select("user_id, first_name, last_name, email, phone, photo_url").in("user_id",e);if(!B&&t){const P={};t.forEach(i=>{P[i.user_id]={id:i.user_id,full_name:`${i.first_name||""} ${i.last_name||""}`.trim(),email:i.email,phone:i.phone,photo_url:i.photo_url}}),d.forEach(i=>{i.user_id&&P[i.user_id]&&(i.profiles=P[i.user_id])})}else B&&console.log("ERROR fetching player data:",B)}const b={};h.forEach(t=>{b[t.id]=t}),d.forEach(t=>{t.event_id&&b[t.event_id]&&(t.reservations=b[t.event_id])})}if(console.log("DEBUG: Final club payments with profile and reservation data:",d),p&&p!=="reservation"){let e=r.from("payment_orders").select(`
          id, order_date, total_amount, payment_method, payment_status, 
          transaction_id, event_type, event_id, club_commission, player_commission, 
          is_full_payment, recipient_id, user_id
        `).eq("recipient_id",s).eq("event_type",p);n&&c?e=e.gte("order_date",n).lte("order_date",c):n&&(e=e.gte("order_date",n));const{data:b,error:t}=await e.order("order_date",{ascending:!1});return t?(console.log("ERROR in non-reservation query:",t),d):b||[]}return d}catch(a){return console.error("ERROR in getClubPaymentOrdersWithFilters:",a),[]}},G=async()=>{console.log("=== DEBUG: Payment Orders Analysis ===");const{data:s,error:n}=await r.from("payment_orders").select("*").limit(10);console.log("Sample payment_orders:",{samplePayments:s,sampleError:n});const{data:c,error:p}=await r.from("payment_orders").select("recipient_id").not("recipient_id","is",null);console.log("Unique recipient_ids in payment_orders:",{recipientIds:c,recipientError:p});const{data:_,error:y}=await r.from("payment_orders").select("event_type").not("event_type","is",null);console.log("Event types in payment_orders:",{eventTypes:_,eventError:y});const{data:f,error:g}=await r.from("payment_orders").select("payment_status").not("payment_status","is",null);console.log("Payment statuses in payment_orders:",{statuses:f,statusError:g});const{data:m,error:E}=await r.from("payment_orders").select("user_id").not("user_id","is",null).limit(5);let a=null;if(m&&m.length>0){const o=[...new Set(m.map(l=>l.user_id))],{data:v,error:u}=await r.from("players").select("user_id, first_name, last_name, email").in("user_id",o);a={playersLookup:v,playersLookupError:u}}return console.log("Payment orders with player data:",{userPlayers:m,playersData:a}),{samplePayments:s,recipientIds:c,eventTypes:_,statuses:f,userPlayers:a}},q=async s=>{console.log("=== DEBUG: Club Payment Approaches for clubId:",s,"===");const{data:n,error:c}=await r.from("payment_orders").select("*").eq("recipient_id",s).limit(5);console.log("Approach 1 - recipient_id filter:",{approach1:n,error1:c});try{const{data:o,error:v}=await r.from("payment_orders").select("*").eq("event_type","reservation").limit(10);if(console.log("Approach 2a - reservation payments:",{reservationPayments:o,reservationError:v}),o&&o.length>0){const u=o.map(l=>l.event_id).filter(Boolean);if(console.log("Approach 2b - event_ids to lookup:",u),u.length>0){const{data:l,error:w}=await r.from("reservations").select(`
            id, court_id,
            courts(id, club_id)
          `).in("id",u);console.log("Approach 2c - reservations found:",{reservations:l,reservationsError:w});const h=l?l.filter(e=>e.courts&&e.courts.club_id===s):[];console.log("Approach 2d - club reservations:",h);const R=new Set(h.map(e=>e.id)),d=o.filter(e=>R.has(e.event_id));console.log("Approach 2e - final filtered payments:",d)}}}catch(o){console.log("Approach 2 - error in step-by-step approach:",o)}const{data:p,error:_}=await r.from("payment_orders").select("*").limit(5);console.log("Approach 3 - any payments exist:",{anyPayments:p,anyError:_});const{data:y,error:f}=await r.from("clubs").select("*").eq("id",s);console.log("Approach 4 - club validity check:",{clubCheck:y,clubError:f});const{data:g,error:m}=await r.from("courts").select("*").eq("club_id",s).limit(3);console.log("Approach 5 - courts for this club:",{courtsCheck:g,courtsError:m});const{data:E,error:a}=await r.from("reservations").select(`
      *,
      courts!inner(club_id)
    `).eq("courts.club_id",s).limit(3);return console.log("Approach 6 - reservations for this club:",{reservationsCheck:E,reservationsError:a}),{approach1:n,anyPayments:p,clubCheck:y,courtsCheck:g,reservationsCheck:E}};export{G as a,q as d,U as g};
