import{s as i}from"./supabase.796930a3.js";import{a as p}from"./api.2af71db3.js";const w=()=>{if(window.location.hostname==="localhost"){const e=window.location.protocol,t=window.location.port,a=`${e}//${window.location.hostname}:${t}/auth/callback`;return console.log("OAuth Redirect URL (development):",a),console.log("Current location:",window.location),a}const o="https://padelplay.mx/auth/callback";return console.log("OAuth Redirect URL (production):",o),o},A={validateOAuthConfig(){console.log("\u{1F50D} Validating OAuth Configuration..."),window.location.hostname==="localhost"&&(console.warn("\u26A0\uFE0F  Development Mode OAuth Checklist:"),console.warn("   \u2713 Ensure localhost redirect URLs are added to Supabase"),console.warn("   \u2713 Google Console should include both Supabase and app callback URLs"),console.warn("   \u2713 Client ID/Secret must match exactly between Google Console and Supabase"));const o="https://ytfwprdrnvgujxdmvvnr.supabase.co";console.log("\u2713 Supabase URL:",o),console.log("\u2713 Expected callback URL:",`${o}/auth/v1/callback`);const e=window.location.origin;return console.log("\u2713 Current app URL:",e),console.log("\u2713 Expected app callback:",`${e}/auth/callback`),{supabaseCallbackUrl:`${o}/auth/v1/callback`,appCallbackUrl:`${e}/auth/callback`,isLocalhost:window.location.hostname==="localhost"}},debugOAuthState(){console.log("=== OAuth Debug Information ==="),console.log("Current URL:",window.location.href),console.log("URL pathname:",window.location.pathname),console.log("URL search:",window.location.search),console.log("URL hash:",window.location.hash);const o=new URLSearchParams(window.location.search),e=new URLSearchParams(window.location.hash.substring(1));console.log("URL Parameters:");for(const[r,s]of o.entries())console.log(`  ${r}: ${s}`);console.log("Hash Parameters:");for(const[r,s]of e.entries())console.log(`  ${r}: ${s}`);const t=["code","state","error","error_code","error_description","access_token","refresh_token"];console.log("OAuth-related parameters found:"),t.forEach(r=>{const s=o.get(r),n=e.get(r);s&&console.log(`  ${r} (URL): ${s}`),n&&console.log(`  ${r} (hash): ${n}`)});const a=o.get("error_description")||e.get("error_description");a&&a.includes("Unable to exchange external code")&&(console.log("\u{1F6A8} OAuth Configuration Issue Detected:"),console.log('   The "Unable to exchange external code" error typically means:'),console.log("   1. Google OAuth Client ID/Secret mismatch between Google Console and Supabase"),console.log("   2. Redirect URL mismatch between Google Console and Supabase"),console.log("   3. Google Console project settings don't allow this domain"),console.log(""),console.log("\u{1F527} To fix this:"),console.log("   1. Go to https://console.cloud.google.com/apis/credentials"),console.log("   2. Find your OAuth 2.0 Client ID"),console.log("   3. Verify the redirect URI includes: https://padelplay.mx/auth/callback"),console.log("   4. Copy the Client ID and Client Secret to your Supabase project"),console.log("   5. In Supabase: Authentication \u2192 Providers \u2192 Google"),console.log("   6. Make sure the credentials match exactly")),console.log("=== End OAuth Debug Information ===")},async signInWithGoogle(){try{const o=this.validateOAuthConfig(),e=w();console.log("Attempting Google OAuth with redirect URL:",e),window.location.hostname==="localhost"&&(console.warn("\u{1F527} OAuth Development Setup Required:"),console.warn("If OAuth redirects to padelplay.mx instead of localhost, you need to:"),console.warn("1. Go to your Supabase dashboard \u2192 Authentication \u2192 URL Configuration"),console.warn("2. Add this URL to Redirect URLs:",e),console.warn("3. See OAUTH_SETUP.md for detailed instructions")),console.log("\u{1F4CB} OAuth URLs that should be configured in Google Console:"),console.log("   \u2022 Supabase callback:",o.supabaseCallbackUrl),console.log("   \u2022 App callback:",o.appCallbackUrl);const{data:t,error:a}=await i.auth.signInWithOAuth({provider:"google",options:{redirectTo:e}});if(a)throw console.error("Google OAuth error:",a),a;return console.log("Google OAuth initiation successful:",t),t}catch(o){throw console.error("Error signing in with Google:",o),o}},async signInWithApple(){try{const{data:o,error:e}=await i.auth.signInWithOAuth({provider:"apple",options:{redirectTo:w()}});if(e)throw console.error("Apple OAuth error:",e),e;return o}catch(o){throw console.error("Error signing in with Apple:",o),o}},async handleOAuthCallback(){var o,e,t,a,r;try{console.log("Attempting to retrieve Supabase session...");const{data:{session:s},error:n}=await i.auth.getSession();if(n)throw console.error("Supabase session error:",n),console.error("Error details:",{message:n.message,status:n.status,statusText:n.statusText}),n;if(!s){console.error("No active Supabase session found"),console.log("Current URL for debugging:",window.location.href);const h=new URLSearchParams(window.location.hash.substring(1)),d=h.get("access_token"),m=h.get("refresh_token");if(d){console.log("Found access token in hash parameters, attempting to set session...");const{data:g,error:u}=await i.auth.setSession({access_token:d,refresh_token:m});if(u)throw console.error("Error setting session from hash params:",u),u;if(g.session){console.log("Successfully set session from hash parameters");const c=g.session.user;return await this.ensureUserProfile(c),{access_token:(await p.post("/auth/oauth-login",{supabase_user_id:c.id,email:c.email,full_name:((o=c.user_metadata)==null?void 0:o.full_name)||c.email.split("@")[0],provider:((e=c.app_metadata)==null?void 0:e.provider)||"google"})).data.access_token,user:c}}}throw new Error("No active session found")}console.log("Successfully retrieved Supabase session"),console.log("Session user:",{id:s.user.id,email:s.user.email,provider:(t=s.user.app_metadata)==null?void 0:t.provider});const l=s.user;await this.ensureUserProfile(l),console.log("Creating JWT token via backend...");const f=await p.post("/auth/oauth-login",{supabase_user_id:l.id,email:l.email,full_name:((a=l.user_metadata)==null?void 0:a.full_name)||l.email.split("@")[0],provider:((r=l.app_metadata)==null?void 0:r.provider)||"google"});return console.log("Successfully created JWT token"),{access_token:f.data.access_token,user:l}}catch(s){throw console.error("Error handling OAuth callback:",s),s.response&&console.error("Backend API error:",{status:s.response.status,statusText:s.response.statusText,data:s.response.data}),s}},async ensureUserProfile(o){try{const{data:e,error:t}=await i.from("profiles").select("*").eq("id",o.id).single();if(t&&t.code!=="PGRST116")throw t;return e||console.log("Profile will be created by backend"),e}catch(e){throw console.error("Error ensuring user profile:",e),e}}};export{A as o};
