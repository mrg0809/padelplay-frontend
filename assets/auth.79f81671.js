import{s as c}from"./supabase.ad40cb04.js";import{a as p}from"./api.f1a1189d.js";const w=()=>{if(window.location.hostname==="localhost"){const e=window.location.protocol,s=window.location.port,t=`${e}//${window.location.hostname}:${s}/auth/callback`;return console.log("OAuth Redirect URL (development):",t),console.log("Current location:",window.location),t}const o="https://padelplay.mx/auth/callback";return console.log("OAuth Redirect URL (production):",o),o},k={debugOAuthState(){console.log("=== OAuth Debug Information ==="),console.log("Current URL:",window.location.href),console.log("URL pathname:",window.location.pathname),console.log("URL search:",window.location.search),console.log("URL hash:",window.location.hash);const o=new URLSearchParams(window.location.search),e=new URLSearchParams(window.location.hash.substring(1));console.log("URL Parameters:");for(const[t,a]of o.entries())console.log(`  ${t}: ${a}`);console.log("Hash Parameters:");for(const[t,a]of e.entries())console.log(`  ${t}: ${a}`);const s=["code","state","error","error_code","error_description","access_token","refresh_token"];console.log("OAuth-related parameters found:"),s.forEach(t=>{const a=o.get(t),r=e.get(t);a&&console.log(`  ${t} (URL): ${a}`),r&&console.log(`  ${t} (hash): ${r}`)}),console.log("=== End OAuth Debug Information ===")},async signInWithGoogle(){try{const o=w();console.log("Attempting Google OAuth with redirect URL:",o),window.location.hostname==="localhost"&&(console.warn("\u{1F527} OAuth Development Setup Required:"),console.warn("If OAuth redirects to padelplay.mx instead of localhost, you need to:"),console.warn("1. Go to your Supabase dashboard \u2192 Authentication \u2192 URL Configuration"),console.warn("2. Add this URL to Redirect URLs:",o),console.warn("3. See OAUTH_SETUP.md for detailed instructions"));const{data:e,error:s}=await c.auth.signInWithOAuth({provider:"google",options:{redirectTo:o}});if(s)throw console.error("Google OAuth error:",s),s;return console.log("Google OAuth initiation successful:",e),e}catch(o){throw console.error("Error signing in with Google:",o),o}},async signInWithApple(){try{const{data:o,error:e}=await c.auth.signInWithOAuth({provider:"apple",options:{redirectTo:w()}});if(e)throw console.error("Apple OAuth error:",e),e;return o}catch(o){throw console.error("Error signing in with Apple:",o),o}},async handleOAuthCallback(){var o,e,s,t,a;try{console.log("Attempting to retrieve Supabase session...");const{data:{session:r},error:l}=await c.auth.getSession();if(l)throw console.error("Supabase session error:",l),console.error("Error details:",{message:l.message,status:l.status,statusText:l.statusText}),l;if(!r){console.error("No active Supabase session found"),console.log("Current URL for debugging:",window.location.href);const h=new URLSearchParams(window.location.hash.substring(1)),d=h.get("access_token"),m=h.get("refresh_token");if(d){console.log("Found access token in hash parameters, attempting to set session...");const{data:g,error:u}=await c.auth.setSession({access_token:d,refresh_token:m});if(u)throw console.error("Error setting session from hash params:",u),u;if(g.session){console.log("Successfully set session from hash parameters");const i=g.session.user;return await this.ensureUserProfile(i),{access_token:(await p.post("/auth/oauth-login",{supabase_user_id:i.id,email:i.email,full_name:((o=i.user_metadata)==null?void 0:o.full_name)||i.email.split("@")[0],provider:((e=i.app_metadata)==null?void 0:e.provider)||"google"})).data.access_token,user:i}}}throw new Error("No active session found")}console.log("Successfully retrieved Supabase session"),console.log("Session user:",{id:r.user.id,email:r.user.email,provider:(s=r.user.app_metadata)==null?void 0:s.provider});const n=r.user;await this.ensureUserProfile(n),console.log("Creating JWT token via backend...");const f=await p.post("/auth/oauth-login",{supabase_user_id:n.id,email:n.email,full_name:((t=n.user_metadata)==null?void 0:t.full_name)||n.email.split("@")[0],provider:((a=n.app_metadata)==null?void 0:a.provider)||"google"});return console.log("Successfully created JWT token"),{access_token:f.data.access_token,user:n}}catch(r){throw console.error("Error handling OAuth callback:",r),r.response&&console.error("Backend API error:",{status:r.response.status,statusText:r.response.statusText,data:r.response.data}),r}},async ensureUserProfile(o){try{const{data:e,error:s}=await c.from("profiles").select("*").eq("id",o.id).single();if(s&&s.code!=="PGRST116")throw s;return e||console.log("Profile will be created by backend"),e}catch(e){throw console.error("Error ensuring user profile:",e),e}}};export{k as o};
