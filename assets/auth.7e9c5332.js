import{s as i}from"./supabase.60a2aacd.js";import{a as s}from"./api.f1a1189d.js";const a=()=>{if(window.location.hostname==="localhost"){const r=window.location.protocol,e=window.location.port,n=`${r}//${window.location.hostname}:${e}/auth/callback`;return console.log("OAuth Redirect URL (development):",n),console.log("Current location:",window.location),n}const o="https://padelplay.mx/auth/callback";return console.log("OAuth Redirect URL (production):",o),o},u={async signInWithGoogle(){try{const o=a();console.log("Attempting Google OAuth with redirect URL:",o),window.location.hostname==="localhost"&&(console.warn("\u{1F527} OAuth Development Setup Required:"),console.warn("If OAuth redirects to padelplay.mx instead of localhost, you need to:"),console.warn("1. Go to your Supabase dashboard \u2192 Authentication \u2192 URL Configuration"),console.warn("2. Add this URL to Redirect URLs:",o),console.warn("3. See OAUTH_SETUP.md for detailed instructions"));const{data:r,error:e}=await i.auth.signInWithOAuth({provider:"google",options:{redirectTo:o}});if(e)throw console.error("Google OAuth error:",e),e;return console.log("Google OAuth initiation successful:",r),r}catch(o){throw console.error("Error signing in with Google:",o),o}},async signInWithApple(){try{const{data:o,error:r}=await i.auth.signInWithOAuth({provider:"apple",options:{redirectTo:a()}});if(r)throw console.error("Apple OAuth error:",r),r;return o}catch(o){throw console.error("Error signing in with Apple:",o),o}},async handleOAuthCallback(){var o,r;try{const{data:{session:e},error:n}=await i.auth.getSession();if(n)throw console.error("Session error:",n),n;if(!e)throw new Error("No active session found");const t=e.user;return await this.ensureUserProfile(t),{access_token:(await s.post("/auth/oauth-login",{supabase_user_id:t.id,email:t.email,full_name:((o=t.user_metadata)==null?void 0:o.full_name)||t.email.split("@")[0],provider:((r=t.app_metadata)==null?void 0:r.provider)||"google"})).data.access_token,user:t}}catch(e){throw console.error("Error handling OAuth callback:",e),e}},async ensureUserProfile(o){try{const{data:r,error:e}=await i.from("profiles").select("*").eq("id",o.id).single();if(e&&e.code!=="PGRST116")throw e;return r||console.log("Profile will be created by backend"),r}catch(r){throw console.error("Error ensuring user profile:",r),r}}};export{u as o};
